#!/usr/bin/env php
<?php
use JMD\Libs\Risk\Authentication;
use JMD\Libs\Risk\DataFormat;
use JMD\Libs\Risk\RiskSend;

$data = getopt('q:h:p:P:d:');


$redis = new Redis();

if ($data['P']) {
    $redis->auth($data['P']);
}

$host = $data['h'];
if (empty($host)) {
    $host = '127.0.0.1';
}

$port = $data['p'];

if (empty($port)) {
    $port = 6379;
}


$redis->connect($host, $port);
if ($data['d']) {
    $redis->select($data['d']);
}

$queueName = $data['q'];

if (empty($queueName)) {
    echo('队列名称不能为空！' . PHP_EOL);
    die(1);
}


foreach (array(
             __DIR__ . '/../../../../../autoload.php',
             __DIR__ . '/../vendor/autoload.php',
             __DIR__ . '/vendor/autoload.php'
         ) as $file) {
    if (file_exists($file)) {
        define('PHPUNIT_COMPOSER_INSTALL', $file);

        break;
    }
}

unset($file);

if (!defined('PHPUNIT_COMPOSER_INSTALL')) {
    fwrite(STDERR,
        'You need to set up the project dependencies using Composer:' . PHP_EOL . PHP_EOL .
        '    composer install' . PHP_EOL . PHP_EOL .
        'You can learn all about Composer on https://getcomposer.org/.' . PHP_EOL
    );

    die(1);
}

require PHPUNIT_COMPOSER_INSTALL;


while (1) {
    $data = $redis->brPop($queueName,30);
    if ($data == null) {
        echo logFormat('无数据');
        continue;
    }
    echo logFormat('接收到数据'.$data[1]);

    /** @var RiskSend $model */
    $model = unserialize($data[1]);
    $data = $model->execute();
    $format = new DataFormat($data);
    if ($format->isError()) {
        fwrite(STDERR, logFormat($data[1] . '：' . $format->getMsg()));
        $redis->lPush($queueName, $data[1]);
    }
    echo logFormat('数据处理完毕'.$data[1]);

}

function logFormat($msg)
{
    return sprintf('[%s] - %s' . PHP_EOL, date('Y-m-d H:i:s'), $msg);
}